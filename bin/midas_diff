#!/usr/bin/env ruby

require File.expand_path '../../lib/miwomi', __FILE__

def exit!(reason='', code=1)
  $stderr.puts <<-EOHELP
  #{reason}
  try --help
  EOHELP
  exit code
end

if __FILE__ == $0
  options = Miwomi::Patch.default_opts

  option_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} FROM_FILE TO_FILE"

    opts.separator ""
    opts.separator "Specific options:"

    opts.on '-d', '--drop x,y,z',
      "Drop blocks/items where x is an id, id range or substring",
      "  -d 4,8,15,16,23,42",
      "  -d 23-42",
      "  -d eloraam.redpower",
      "  -d 666,number.beast,6-66",
      "  they will vanish into thin air",
      Array do |list|
      list.each do |item|
        case item
        when /^\d+$/
          options.ignore_ids << item.to_i
        when /^(\d+)-(\d+)$/
          $1.to_i.upto($2.to_i) do |i|
            options.ignore_ids << i
          end
        else
          options.ignore << item
        end
      end
    end

   opts.on '-a', '--alternative foo/bar,bam/baz',
     "try an alternative if first name does not yield match (renamed plugins)",
     "  if 'foo' is not found, it is replaced by 'bar'",
     "  -a rc.liquid/railcraft.fluid",
     Array do |list|
       list.each do |item|
         pair = item.split('/')[0..1]
         if pair.length == 2
           options.alternatives << pair
         else
           raise "must give alternative like so: -a original/alternative"
         end
       end
   end

   opts.on '-P', '--[no-]progress', "show progress bar" do |v|
     options.progressbar = v
   end

   opts.on '-o', '--output FILE', "path for final mIDas patch file" do |v|
     options.output_filename = v
   end


    opts.separator ""
    opts.separator "Common options:"

    # No argument, shows at tail.  This will print an options summary.
    # Try it and see!
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  option_parser.parse!

  from_file = ARGV.shift || exit!('could not find source file')
  to_file   = ARGV.shift || exit!('could not find target file')

  exit!("trailing filenames: #{ARGV.join(' ')}") unless ARGV.empty?

  from = Miwomi::Parser.parse_file from_file
  to   = Miwomi::Parser.parse_file to_file

  patch = Miwomi::Patch.new from, to, options
  begin
    patch.apply_and_write

  rescue Miwomi::Patch::Error => e
    $stderr.puts e.message
    exit 2
  end
end
